digraph createParticipant {
  subgraph MainThread {
    node [style=filled];
    color = lightgrey;
    label = "thread #1";

    a1[label="Domain::createParticipant"];
    a2[label="RTPSDomain::createParticipant"];

    a3[label="new RTPSParticipantImpl"];
    a4[label="BuiltinProtocols::initBuiltinProtocols"]
    a5[label="PDPSimple::init"]
    a6[label="PDP::initPDP"]
    a7[label="PDPSimple::createPDPEndpoints"]

    a8[label="PDPSimple::announceParticipantState"]
    a9[label="PDP::announceParticipantState"]
    a10[label="WriterHistory::add_change"]
    a11[label="WriterHistory::add_change_"]
    a12[label="StatelessWriter::unsent_change_added_to_history"]
    a13[label="RTPSMessageGroup::~RTPSMessageGroup"]
    a14[label="RTPSMessageGroup::send"]
    a15[label="StatelessWriter::send"]
    a16[label="RTPSWriter::send"]
    a17[label="RTPSParticipantImpl::sendSync"]
    a18[label="SenderResource::send"]
    a19[label="UDPSenderResource::UDPSenderResource"]
    a20[label="UDPTransportInterface::send"]
    a1 -> a2;
    a2 -> a3;
    a3 -> a4 -> a5 -> a6 -> a7;
    a4 -> a8 -> a9 -> a10 -> a11 -> a12 -> a13 -> a14 -> a15 -> a16 -> a17 -> a18 -> a19 -> a20;
  }

  subgraph ResourceEventThread {
    label = "thread #2";

    b1[label="ResourceEvent::init_thread"]
    b2[label="std::thread(ResourceEvent::run_io_service)"]
    b1 -> b2;
  }

  subgraph MulticastResourceReceiverThread {
    label = "thread #3";

    c1[label="RTPSParticipantImpl::createReceiverResources"]
    c2[label="NetworkFactory::BuildReceiverResources"]
    c3[label="ReceiverResource::ReceiverResource"]
    c4[label="UDPv4Transport::OpenInputChannel"]
    c5[label="UDPTransportInterface::OpenAndBindInputSockets"]
    c6[label="UDPTransportInterface::CreateInputChannelResource"]
    c7[label="UDPChannelResource::UDPChannelResource"]
    c8[label="std::thread(&UDPChannelResource::perform_listen_operation)"]
    c9[label="UDPChannelResource::perform_listen_operation"]
    c10[label="ReceiverResource::OnDataReceived"]
    c11[label="MessageReceiver::processCDRMsg"]
    c12[label="MessageReceiver::proc_Submsg_Data"]
    c13[label="MessageReceiver::findAllReaders"]
    c14[label="StatelessReader::processDataMsg"]
    c15[label="StatelessReader::change_received"]
    c16[label="PDPListener::onNewCacheChangeAdded"]
    c17[label="PDPSimple::announceParticipantState"]
    c18[label="StatelessWriter::unsent_changes_reset"]

    wait

    c19[label="AsyncWriterThread::wake_up"]

    c1->c2->c3->c4->c5->c6->c7->c8->c9;
    c9->c10->c11->c12->c13->c14->c15->c16->c17->c18->wait->c19;
  }

  subgraph UnicastResourceReceiverThread {
    label = "thread #4";

    d1[label="RTPSParticipantImpl::createReceiverResources"]
    d2[label="NetworkFactory::BuildReceiverResources"]
    d3[label="ReceiverResource::ReceiverResource"]
    d4[label="UDPv4Transport::OpenInputChannel"]
    d5[label="UDPTransportInterface::OpenAndBindInputSockets"]
    d6[label="UDPTransportInterface::CreateInputChannelResource"]
    d7[label="UDPChannelResource::UDPChannelResource"]
    d8[label="std::thread(&UDPChannelResource::perform_listen_operation)"]
    d9[label="UDPChannelResource::perform_listen_operation"]
    d10[label="UDPChannelResource::Receive"]

    d1->d2->d3->d4->d5->d6->d7->d8->d9->d10;
  }

  subgraph DefaultUnicastResourceReceiverThread {
    label = "thread #5";

    e1[label="RTPSParticipantImpl::createReceiverResources"]
    e2[label="NetworkFactory::BuildReceiverResources"]
    e3[label="ReceiverResource::ReceiverResource"]
    e4[label="UDPv4Transport::OpenInputChannel"]
    e5[label="UDPTransportInterface::OpenAndBindInputSockets"]
    e6[label="UDPTransportInterface::CreateInputChannelResource"]
    e7[label="UDPChannelResource::UDPChannelResource"]
    e8[label="std::thread(&UDPChannelResource::perform_listen_operation)"]
    e9[label="UDPChannelResource::perform_listen_operation"]
    e10[label="UDPChannelResource::Receive"]

    e1->e2->e3->e4->e5->e6->e7->e8->e9->e10;
  }

  subgraph DefaultMulticastResourceReceiverThread {
  }

  start -> a1;
  a3 -> b1;
  a3 -> c1;
  a3 -> d1;
  a3 -> e1;
  a20 -> end;

  start [shape=Mdiamond];
  end [shape=Msquare];
}